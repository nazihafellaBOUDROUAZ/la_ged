const express = require('express');  // Importation d'Express, framework pour cr√©er le serveur HTTP.
const router = express.Router();  // Cr√©ation d'un routeur Express pour d√©finir des routes d'API.
const multer = require('multer');  // Importation de Multer pour g√©rer les t√©l√©chargements de fichiers.
const cloudinary = require('../config/cloudinary');  // Importation de la configuration Cloudinary pour t√©l√©charger des fichiers.
const { CloudinaryStorage } = require('multer-storage-cloudinary');  // Importation de la classe CloudinaryStorage pour stocker les fichiers dans Cloudinary via Multer.
const db = require('../db');  // Importation de la configuration de la base de donn√©es pour interagir avec MySQL.

// üîß Configuration Cloudinary Storage
const storage = new CloudinaryStorage({
  cloudinary: cloudinary,  // Utilisation de l'objet Cloudinary configur√© pour stocker les fichiers.
  params: {
    folder: 'ged_documents',  // Dossier dans lequel les fichiers seront stock√©s sur Cloudinary.
    resource_type: 'auto',  // Type de ressource 'auto' qui ajuste automatiquement le type de fichier.
    format: async (req, file) => undefined,  // Conservation du format d'origine du fichier (pas de conversion).
    public_id: (req, file) => {
      const timestamp = Date.now();  // Cr√©ation d'un identifiant unique bas√© sur l'heure actuelle.
      return `${timestamp}-${file.originalname}`;  // Utilisation du timestamp et du nom original du fichier pour g√©n√©rer l'ID public sur Cloudinary.
    },
    resource_type: (req, file) => {
      const fileExtension = file.originalname.split('.').pop().toLowerCase();
      if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(fileExtension)) {
        return 'image'; // Images
      } else if (['pdf', 'docx', 'doc', 'xlsx', 'pptx'].includes(fileExtension)) {
        return 'raw'; // Documents
      }
      return 'auto'; // Autres types (Cloudinary d√©tecte automatiquement)
    }
    
  },
});

const upload = multer({ storage: storage });  // Initialisation de Multer avec la configuration CloudinaryStorage pour g√©rer les uploads.

// üì§ POST ‚Äì Upload document
router.post('/upload', upload.single('file'), async (req, res) => {  // Route pour t√©l√©charger un fichier, g√©r√©e par Multer avec un champ 'file'.
  try {
    const { filename, date, department, fileHash } = req.body;  // R√©cup√©ration des donn√©es de formulaire envoy√©es dans le corps de la requ√™te.
    const fileUrl = req.file.path;  // R√©cup√©ration de l'URL du fichier sur Cloudinary.
    const public_id = req.file.filename;  // Utilisation du nom de fichier comme identifiant public sur Cloudinary.

    // üîç V√©rifier doublon par fileHash
    const [existing] = await db.query('SELECT * FROM documents WHERE fileHash = ?', [fileHash]);  // Requ√™te pour v√©rifier si un document avec le m√™me hash existe d√©j√†.
    if (existing.length > 0) {  // Si un document avec le m√™me hash existe.
      return res.status(409).json({ error: '‚ùå Un document avec le m√™me contenu existe d√©j√†.' });  // Retourne une erreur 409 (conflit) avec un message.
    }

    // üíæ Insertion en BDD
    const sql = `INSERT INTO documents (filename, date, department, cloudinaryUrl, fileHash, public_id)
                 VALUES (?, ?, ?, ?, ?, ?)`;  // Requ√™te SQL pour ins√©rer les m√©tadonn√©es du document dans la base de donn√©es.
    await db.query(sql, [filename, date, department, fileUrl, fileHash, public_id]);  // Ex√©cution de la requ√™te d'insertion.

    res.status(201).json({ message: '‚úÖ Document upload√© avec succ√®s' });  // R√©ponse avec succ√®s apr√®s l'upload du fichier.
  } catch (error) {
    console.error('‚ùå Erreur upload :', error);  // Affichage de l'erreur dans la console en cas d'√©chec.
    res.status(500).json({ error: 'Erreur lors de l‚Äôupload du document' });  // R√©ponse avec erreur 500 en cas d'√©chec.
  }
});

// üì• GET ‚Äì Tous les documents
router.get('/', async (req, res) => {  // Route pour r√©cup√©rer tous les documents de la base de donn√©es.
  try {
    const [rows] = await db.query('SELECT * FROM documents');  // Requ√™te SQL pour r√©cup√©rer tous les documents.
    res.status(200).json(rows);  // R√©ponse avec les documents r√©cup√©r√©s.
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration documents :', error);  // Affichage de l'erreur dans la console.
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des documents' });  // R√©ponse avec erreur 500 en cas d'√©chec.
  }
});

// ‚úèÔ∏è PUT ‚Äì Modifier document
router.put('/:id', async (req, res) => {  // Route pour modifier un document existant, en utilisant son ID.
  const docId = req.params.id;  // R√©cup√©ration de l'ID du document √† partir des param√®tres de la requ√™te.
  const { filename, date, department } = req.body;  // R√©cup√©ration des nouvelles donn√©es du document envoy√©es dans le corps de la requ√™te.

  try {
    const sql = `UPDATE documents SET filename = ?, date = ?, department = ? WHERE id = ?`;  // Requ√™te SQL pour mettre √† jour un document dans la base de donn√©es.
    await db.query(sql, [filename, date, department, docId]);  // Ex√©cution de la requ√™te de mise √† jour.

    res.status(200).json({ message: '‚úÖ Document modifi√© avec succ√®s' });  // R√©ponse avec succ√®s apr√®s la modification du document.
  } catch (error) {
    console.error('‚ùå Erreur modification document :', error);  // Affichage de l'erreur dans la console en cas d'√©chec.
    res.status(500).json({ error: 'Erreur lors de la modification du document' });  // R√©ponse avec erreur 500 en cas d'√©chec.
  }
});

// üóëÔ∏è DELETE ‚Äì Supprimer document (Cloudinary + BDD)
router.delete('/:id', async (req, res) => {  // Route pour supprimer un document en utilisant son ID.
  const docId = req.params.id;  // R√©cup√©ration de l'ID du document √† partir des param√®tres de la requ√™te.

  try {
    // üîç R√©cup√©rer le document depuis la base de donn√©es
    const [rows] = await db.query('SELECT * FROM documents WHERE id = ?', [docId]);  // Requ√™te pour r√©cup√©rer le document √† supprimer.
    if (rows.length === 0) {  // Si aucun document trouv√©.
      return res.status(404).json({ error: 'Document non trouv√©' });  // Retourne une erreur 404 (document non trouv√©).
    }

    let public_id = rows[0].public_id;  // R√©cup√©ration de l'identifiant public du document √† supprimer.
    const fileUrl = rows[0].cloudinaryUrl;  // R√©cup√©ration de l'URL du fichier sur Cloudinary.

    console.log('üß® Suppression Cloudinary avec public_id:', public_id);  // Affichage du public_id pour la suppression dans Cloudinary.

    // ‚ö†Ô∏è Si `public_id` ne contient pas "ged_documents/", l'ajouter manuellement
    if (!public_id.startsWith('ged_documents/')) {
      public_id = `ged_documents/${public_id}`;  // Pr√©paration de l'identifiant pour suppression sur Cloudinary.
    }

    // üß† D√©terminer le type du fichier (image, pdf, ou autre)
    const fileExtension = fileUrl.split('.').pop().toLowerCase();
let resourceType = 'raw'; // Par d√©faut pour les fichiers autres qu'images

if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(fileExtension)) {
  resourceType = 'image';
} else if (['pdf', 'docx', 'doc', 'xlsx', 'pptx'].includes(fileExtension)) {
  resourceType = 'raw';
}

await cloudinary.uploader.destroy(public_id, { resource_type: resourceType });

    // ‚úÖ Supprimer le document de la BDD
    await db.query('DELETE FROM documents WHERE id = ?', [docId]);  // Suppression du document de la base de donn√©es.

    res.status(200).json({ message: 'üóëÔ∏è Document supprim√© avec succ√®s' });  // R√©ponse de succ√®s apr√®s la suppression du document.
  } catch (error) {
    console.error('‚ùå Erreur suppression document :', error);  // Affichage de l'erreur dans la console en cas d'√©chec.
    res.status(500).json({ error: 'Erreur lors de la suppression du document' });  // R√©ponse avec erreur 500 en cas d'√©chec.
  }
});

module.exports = router;  // Exportation du routeur pour qu'il puisse √™tre utilis√© dans d'autres parties de l'application.
